version: '3'

x-common-variables:
  &default-common
  restart: always
  env_file: ./.env
  dns:
    - ${DNS:-8.8.8.8}
    - ${DNS:-223.5.5.5}

services:

################################  ttrss  ###################################
  ttrss:
    << : *default-common
    image: wangqiru/ttrss:latest
    container_name: ttrss
    ports:
      - 8181:80 # 将冒号前的8181改成自己想要的端口
    environment:
      - SELF_URL_PATH=http://localhost:8181 # 换成自己的ip地址
      - PUID=1000
      - PGID=1000
      - DB_NAME=ttrss
      - DB_TYPE=pgsql # type: pgsql or mysql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${PG_USER}
      - DB_PASS=${PG_PASSWORD}
      - ENABLE_PLUGINS=auth_internal,fever # auth_internal is required. Plugins enabled here will be enabled for all users as system plugins
    volumes:
      - feed-icons:/var/www/feed-icons/
    networks:
      - default
      - service_only
    stdin_open: true
    tty: true
    command: sh -c 'sh /wait-for.sh $$DB_HOST:$$DB_PORT -- php /configure-db.php && exec s6-svscan /etc/s6/'

  postgres:
    extends:
      file: compose_databases.yaml
      service: postgres-server

  service.mercury: # # 启用插件后，在“订阅源“-”插件“中配置：service.mercury:3000
    << : *default-common
    image: wangqiru/mercury-parser-api:latest
    container_name: mercury
    expose:
      - 3000
    restart: always
    networks:
      - service_only
    # ⬇️ 这将使 Watchtower 跳过对 mercury-parser-api 的更新检测
    # labels:
    #     - com.centurylinklabs.watchtower.enable=false

  service.opencc: # 启用插件后，在“订阅源“-”插件“中配置：service.opencc:3000
    << : *default-common
    image: wangqiru/opencc-api-server:latest
    container_name: opencc
    environment:
      NODE_ENV: production
    expose:
      - 3000
    restart: always

  # 用于自动执行 Docker 容器基础映像更新
  watchtower:
    << : *default-common
    image: containrrr/watchtower
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # 在浏览器中打开 http://{Server IP}:61200，enjoy it!
  rsshub:
    << : *default-common
    # two ways to enable puppeteer:
    # * comment out marked lines, then use this image instead: diygod/rsshub:chromium-bundled
    # * (consumes more disk space and memory) leave everything unchanged
    image: diygod/rsshub
    container_name: rsshub
    restart: always
    ports:
      - '61200:1200'
    environment:
      NODE_ENV: production
      CACHE_TYPE: redis
      REDIS_URL: "redis://redis:${REDIS_HOST_PORT}/"
      PUPPETEER_WS_ENDPOINT: 'ws://browserless:3333'  # marked
    depends_on:
      - redis
      - browserless  # marked
    networks:
      - default
      - service_only

  browserless:  # marked
    << : *default-common
    image: browserless/chrome  # marked
    restart: always  # marked
    ports:
      - '3333:3000'
    ulimits:  # marked
      core:  # marked
        hard: 0  # marked
        soft: 0  # marked
    networks:
      - service_only

  redis:
    extends:
      file: compose_databases.yaml
      service: redis-server

volumes:
  feed-icons:

networks:
  default:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: 0
    internal: false
  service_only: # Provide the communication network between services only
    internal: true