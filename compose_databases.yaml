x-common-variables:
  &default-common
  restart: always
  env_file: ./.env
  dns:
    - ${DNS:-8.8.4.4}
    - ${DNS:-223.5.5.5}

services:

################  valkey - redis衍生版 ########################
  valkey-server:
    << : *default-common
    container_name: valkey
    build:
      context: ./
      dockerfile: ./build/valkey/Dockerfile
      args:
        ALPINE_REPOSITORIES: ${ALPINE_REPOSITORIES}
        CHANGE_SOURCE: ${CHANGE_SOURCE}  
        VALKEY_VERSION: ${VALKEY_VERSION}
        http_proxy: ${http_proxy}
        https_proxy: ${https_proxy}
        no_proxy: ${no_proxy}
    ports:
      - "${REDIS_HOST_PORT}:6379"
    environment:
      # TZ: ${TZ}
      - SET_CONTAINER_TIMEZONE=true
      - CONTAINER_TIMEZONE=${TZ}
    volumes:
      - ${REDIS_CONF_FILE}:/etc/redis.conf:ro
      - ${REDIS_LOG_DIR}:/var/log/redis/:rw
    entrypoint: ["valkey-server", "/etc/redis.conf"]
    deploy:
     resources:
        limits:
           cpus: ${REDIS_LIMITS_CPU}
           memory: ${REDIS_LIMITS_MEMORY}
        reservations:
           memory: ${REDIS_RESERVATIONS_MEMORY}
    networks:
      - default
    # sysctls:
    #   - net.core.somaxconn=1024

################  redis ########################
  redis-server:
    << : *default-common
    container_name: redis
    build:
      context: ./
      dockerfile: ./build/redis/Dockerfile
      args:
        ALPINE_REPOSITORIES: ${ALPINE_REPOSITORIES}
        CHANGE_SOURCE: ${CHANGE_SOURCE}
        REDIS_VERSION: ${REDIS_VERSION}
        http_proxy: ${http_proxy}
        https_proxy: ${https_proxy}
        no_proxy: ${no_proxy}
    ports:
      - "${REDIS_HOST_PORT:-6379}:6379"
    environment:
      - SET_CONTAINER_TIMEZONE=true
      - CONTAINER_TIMEZONE=${TZ:-Asia/Shanghai}
    volumes:
      - ${REDIS_CONF_FILE:-./conf/redis.conf}:/etc/redis.conf:ro
      - ${REDIS_LOG_DIR:-./logs/redis}:/var/log/redis/:rw
    entrypoint: ["redis-server", "/etc/redis.conf"]
    deploy:
      resources:
        limits:
          cpus: ${REDIS_LIMITS_CPU:-0.5}
          memory: ${REDIS_LIMITS_MEMORY:-512M}
        reservations:
          memory: ${REDIS_RESERVATIONS_MEMORY:-256M}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - default
    # sysctls:
    #   - net.core.somaxconn=1024

################  MySQL ########################

# 采用官方二进制安装包安装，根据需要选择安装指定版本的mysql;
# 可有效避免docker仓库通过apt直接安装,因网络问题key无法下载问题。
# 缺点：采用该方式，会导致images文件大小会偏大一点
# 
# ⚠️  重要提示：mysql-server 和 mysql8-server 是两种不同的MySQL8安装方式
# 请根据需要选择其中一种，不要同时启动两个服务以避免资源冲突！
# 
# mysql-server:  使用 Dockerfile (标准安装方式)
# mysql8-server: 使用 Dockerfile_gf (优化安装方式)
  mysql-server:
    << : *default-common
    container_name: mysql
    # security_opt: # docker安全验证
    #   - seccomp:unconfined
    build:
      context: ./
      dockerfile: ./build/mysql/Dockerfile
      args:
        - MYSQL_VER=${MYSQL_VERSION}
        - GOSU_VERSION=${GOSU_VERSION}
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - http_proxy=${http_proxy}
        - https_proxy=${https_proxy}
        - no_proxy=${no_proxy}
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command:
      - mysqld
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --init-connect='SET NAMES utf8mb4;'
      - --innodb-flush-log-at-trx-commit=0
    environment:
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${TZ}
      # - MYSQL_ALLOW_EMPTY_PASSWORD="true"
    volumes:
      - mysql_data:/var/lib/mysql:rw
      #- ${MYSQL_CONF_FILE}:/etc/mysql/conf.d/docker.cnf:ro
      - ${MYSQL_CONF_FILE}:/etc/mysql/my.cnf:ro
      - ${MYSQL_LOG_DIR}:/var/log/mysql
    ports:
      - "${MYSQL_HOST_PORT:-3306}:3306"  # 默认端口3306
    networks:
      default:
        aliases:
          - mysql-server
    deploy:
     resources:
        limits:
           cpus: ${MYSQL_LIMITS_CPU}
           memory: ${MYSQL_LIMITS_MEMORY}
        reservations:
           memory: ${MYSQL_RESERVATIONS_MEMORY}
    platform: linux/x86_64

  mysql8-server:
    << : *default-common
    container_name: mysql8
    # security_opt: # docker安全验证
    #   - seccomp:unconfined
    build:
      context: ./
      dockerfile: ./build/mysql/Dockerfile_gf
      args:
        - MYSQL_VER=${MYSQL_VERSION}
        - GOSU_VERSION=${GOSU_VERSION}
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - http_proxy=${http_proxy}
        - https_proxy=${https_proxy}
        - no_proxy=${no_proxy}
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command:
      - mysqld
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --init-connect='SET NAMES utf8mb4;'
      - --innodb-flush-log-at-trx-commit=0
    # command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --init-connect='SET NAMES utf8mb4;' --innodb-flush-log-at-trx-commit=0
    environment:
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${TZ}
      # - MYSQL_ALLOW_EMPTY_PASSWORD="true"
    volumes:
      - mysql8_data:/var/lib/mysql:rw  # 使用独立的数据卷
      #- ${MYSQL_CONF_FILE}:/etc/mysql/conf.d/docker.cnf:ro
      - ${MYSQL_CONF_FILE}:/etc/mysql/my.cnf:ro
      - ${MYSQL_LOG_DIR}:/var/log/mysql
    ports:
      - "${MYSQL8_HOST_PORT:-3307}:3306"  # 使用不同的端口，默认3307
    networks:
      default:
        aliases:
          - mysql8-server
    deploy:
     resources:
        limits:
           cpus: ${MYSQL_LIMITS_CPU}
           memory: ${MYSQL_LIMITS_MEMORY}
        reservations:
           memory: ${MYSQL_RESERVATIONS_MEMORY}
    platform: linux/x86_64

  db-data-mysql:
    << : *default-common
    container_name: db-data-mysql
    image: busybox
    volumes:
      - mysql_data:/var/lib/mysql:rw

################   mongo ########################
  mongo-server:
    << : *default-common
    container_name: mongo
    build:
      context: ./
      dockerfile: ./build/mongo/Dockerfile
      args:
        MONGO_VERSION: ${MONGO_VERSION}
        CHANGE_SOURCE: ${CHANGE_SOURCE}
        http_proxy: ${http_proxy}
        https_proxy: ${https_proxy}
        no_proxy: ${no_proxy}
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "${MONGO_HOST_PORT}:27017"
    volumes:
      - ${MONGO_DATA_DB_DIR}:/data/db:rw
    deploy:
      resources:
        limits:
           cpus: ${MONGO_LIMITS_CPU}
           memory: ${MONGO_LIMITS_MEMORY}
        reservations:
           memory: ${MONGO_RESERVATIONS_MEMORY}
    networks:
      - default
    command:
      --auth

#################   postgres  ########################
  postgres-server:
    << : *default-common
    container_name: postgres
    build:
      context: ./
      dockerfile: ./build/postgres/Dockerfile
      args:
        PG_VERSION: ${PG_VERSION}
        CHANGE_SOURCE: ${CHANGE_SOURCE}
        http_proxy: ${http_proxy}
        https_proxy: ${https_proxy}
        no_proxy: ${no_proxy}
    ports:
      - "${PG_PORT}:5432"
    environment:
      # - PG_USER=${PG_USER}
      # - PG_PASSWORD=${PG_PASSWORD}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - ALPINE_REPOSITORIES=${ALPINE_REPOSITORIES}
    volumes:
      - ${POSTGRES_DATA_DB_DIR}:/var/lib/postgresql/data # persist postgres data to ~/postgres/data/ on the host
    deploy:
      resources:
        limits:
           cpus: ${PG_LIMITS_CPU}
           memory: ${PG_LIMITS_MEMORY}
        reservations:
           memory: ${PG_RESERVATIONS_MEMORY}
    networks:
      - default
    restart: unless-stopped

  pgadmin-server:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - default
    restart: unless-stopped

volumes:
  mysql_data:
  mysql8_data:
  pgadmin: